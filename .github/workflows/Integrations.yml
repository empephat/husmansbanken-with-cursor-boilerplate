name: Build and Deploy

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci

        # Debug step to check directory structure
      - name: Debug - List Files
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Prisma directory contents (if exists):"
          ls -la prisma || echo "Prisma directory not found"

        # Try to locate and validate schema file
      - name: Validate Prisma Schema Location
        run: |
          if [ -f "prisma/schema.prisma" ]; then
            echo "Schema file found at prisma/schema.prisma"
            cat prisma/schema.prisma
          else
            echo "Schema file not found at prisma/schema.prisma"
            find . -name "schema.prisma"
          fi

        # Instead of creating schema file, just run generate
      - name: Generate Prisma Client
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          npx prisma generate --schema=./prisma/schema.prisma

      - name: Build
        run: npm run build

      # Create artifact of build output
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: |
            .next
            package.json
            package-lock.json
            next.config.js
            public
          retention-days: 1

  deploy-staging:
    name: Deploy to Staging
    needs: build # Wait for build job to complete
    runs-on: ubuntu-latest
    environment: staging # Define staging environment

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Install production dependencies only
      - name: Install production dependencies
        run: npm ci

      # Add environment variables for staging
      - name: Setup Environment Variables
        run: |
          echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> .env
          echo "API_KEY=${{ secrets.STAGING_API_KEY }}" >> .env

      # Simulate deployment steps
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "📦 Build files downloaded to: $(pwd)"
          echo "📝 Checking build files:"
          ls -la
          echo "✨ Running deployment script..."
          # Here you would typically have your actual deployment commands
          # For example:
          # - npm run deploy:staging
          # - docker-compose up
          # - rsync to staging server
          # etc.

      # Verify deployment
      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          echo "✅ Application deployed to: https://staging.yourapp.com"
          # Add health check or smoke tests here
          # curl https://staging.yourapp.com/health

  # Optional: Add production deployment
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging] # Wait for both build and staging
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' # Only deploy to prod from main branch

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install production dependencies
        run: npm ci --only=production

      - name: Setup Environment Variables
        run: |
          echo "DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" >> .env
          echo "API_KEY=${{ secrets.PROD_API_KEY }}" >> .env

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          # Add your production deployment commands here
